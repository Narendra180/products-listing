import { useState, useEffect, useCallback } from 'react';
import Head from 'next/head';
import CustomDropDown from '../components/custom-drop-down/custom-drop-down';
import ProductDescriptionModal from '../components/product-description-modal/product-description-modal';
import PolarisTabs from '../components/polaris-tabs/polaris-tabs';
import { optionsArray } from '../components/custom-drop-down/options-data';
import { Button } from "@shopify/polaris";
import { getAdditionalData, getFilteredProductsArray } from '../utils/home.utils';
import styles from '../styles/Home.module.scss';

function Home() {
	const [state,setState] = useState({
		productsArrayFromApi: [],
		isProductsLoading: true,
		errorMessage: "",
		filteredProductsArray: []
	});

	const [filtersState,setFiltersState] = useState({
		selectedTabIndex: 0,
		availability: null,
		productType: null,
		vendor: null,
		queryValue: ""
	});


	const getProducts = async () => {
		try {
			const response = await fetch("https://fakestoreapi.com/products");
			let products = await response.json();
			products = getAdditionalData(products);
			setState((prevState) => {
				return {
					...prevState, 
					productsArrayFromApi: products, 
					filteredProductsArray: [...products],
					isProductsLoading: false,
					errorMessage: ""
				}
			});
		} catch(err) {
			console.log(err);
			setState((prevState) => {
				return {
					...prevState, 
					isProductsLoading: false,
					errorMessage: "Something Went Wrong, Please Try Again Later."
				}
			});
			setTimeout(() => getProducts(), 5000);
		}
		
	}

	const handleFiltersChange = (name,remove) => {
		if(remove) {
			setFiltersState((prevState) => {
				return {...prevState,[name]: remove.value}
			});
			return;
		}
		return (value) => {
			setFiltersState((prevState) => {
				return {...prevState,[name]: value}
			});
		}
	}

	const updateFilteredProducts = () => {
		const filteredProductsArray = getFilteredProductsArray(state.productsArrayFromApi,filtersState);
		setState({...state,filteredProductsArray});
	}

	useEffect(() => {
		getProducts();
	}, []);
	

	useEffect(() => {
		if(state.productsArrayFromApi.length > 0) {
			updateFilteredProducts();
		}
	},[filtersState]);

	const [productDescriptionModalState,setProductDescriptionModalState] = useState(
		{
			open: false,
			data: null
		}
	)

	const handleProductDescriptionModalClose = () => {
		setProductDescriptionModalState(
			{
				...productDescriptionModalState,
				open: false,
				data: null
			}
		);
	}
	
	
	const handleDataTableRowClick = (event) => {
		const data = event.target.dataset;
		setProductDescriptionModalState({
			...productDescriptionModalState,data, open: true
		});
	}

	return (
		<div className={styles["home-container"]}>
			<Head>
				<title>Product Listing</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className={styles["home-content-wrapper"]}>
				<div className={styles.header}>
					<h1 >Products</h1>
					<ul>
						<li>
							<button className={styles["export-import-btn"]}>
								Export
							</button>
						</li>
						<li>
							<button className={styles["export-import-btn"]}>
								Import								
							</button>
						</li>
						<li>
							<CustomDropDown 
								btnContent="More Options"
								optionsArray={optionsArray}
								onChange={(e) => console.log(e)}
							/>
						</li>
						<li>
							<Button primary>Add&nbsp;Product</Button>
						</li>
					</ul>
				</div>

				<div className={styles['products-table-container']}>
					<PolarisTabs 
						filtersState={filtersState}
						filtersChange={handleFiltersChange}
						productsArray={state.filteredProductsArray}
						isProductsLoading={state.isProductsLoading}
						handleDataTableRowClick={handleDataTableRowClick}
					/>
				</div>
				
				<ProductDescriptionModal
					open={productDescriptionModalState.open}
					data={productDescriptionModalState.data}
					onClose={handleProductDescriptionModalClose}
				/>
			</div>
		</div>
	)
}

export default Home;